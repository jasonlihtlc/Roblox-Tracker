-- StarterPlayerScripts/ColorPicker (LocalScript) - HSV Picker with Auto-Hide + Reopen Button

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer
local remotes = ReplicatedStorage:WaitForChild("Remotes", 60)
if not remotes then return end
local ColorChoice = remotes:WaitForChild("ColorChoice", 60)
if not ColorChoice then return end

-- === State ===
local h, s, v = 0, 1, 1
local isDraggingSV = false
local isDraggingH  = false
local pickerVisible = true

-- === GUI Root ===
local gui = Instance.new("ScreenGui")
gui.Name = "ColorPicker"
gui.ResetOnSpawn = false
gui.IgnoreGuiInset = false
gui.Parent = player:WaitForChild("PlayerGui")

-- === Reopen button (always visible) ===
local reopenBtn = Instance.new("TextButton")
reopenBtn.Name = "ReopenColorPicker"
reopenBtn.Text = "ðŸŽ¨"
reopenBtn.TextScaled = true
reopenBtn.Font = Enum.Font.GothamBold
reopenBtn.TextColor3 = Color3.fromRGB(255,255,255)
reopenBtn.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
reopenBtn.AutoButtonColor = true
reopenBtn.AnchorPoint = Vector2.new(1, 0)
reopenBtn.Position = UDim2.new(1, -12, 0, 12)
reopenBtn.Size = UDim2.fromOffset(40, 34)
reopenBtn.Parent = gui
do
	local c = Instance.new("UICorner")
	c.CornerRadius = UDim.new(0, 8)
	c.Parent = reopenBtn
end

-- === HSV Panel ===
local panel = Instance.new("Frame")
panel.Name = "HSVPanel"
panel.AnchorPoint = Vector2.new(1, 1)
panel.Position = UDim2.new(1, -12, 1, -12)
panel.Size = UDim2.fromOffset(360, 240)
panel.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
panel.BorderSizePixel = 0
panel.Parent = gui
do
	local c = Instance.new("UICorner"); c.CornerRadius = UDim.new(0, 12); c.Parent = panel
	local pad = Instance.new("UIPadding")
	pad.PaddingTop = UDim.new(0, 10)
	pad.PaddingBottom = UDim.new(0, 10)
	pad.PaddingLeft = UDim.new(0, 10)
	pad.PaddingRight = UDim.new(0, 10)
	pad.Parent = panel
end

local title = Instance.new("TextLabel")
title.BackgroundTransparency = 1
title.Text = "Pick a Color"
title.TextScaled = true
title.Font = Enum.Font.GothamBold
title.TextColor3 = Color3.fromRGB(255,255,255)
title.Size = UDim2.new(1, 0, 0, 24)
title.Parent = panel

-- Selected swatch
local swatchRow = Instance.new("Frame")
swatchRow.BackgroundTransparency = 1
swatchRow.Position = UDim2.new(0, 0, 0, 30)
swatchRow.Size = UDim2.new(1, 0, 0, 28)
swatchRow.Parent = panel

local swatchLabel = Instance.new("TextLabel")
swatchLabel.BackgroundTransparency = 1
swatchLabel.Text = "Selected"
swatchLabel.TextScaled = true
swatchLabel.Font = Enum.Font.Gotham
swatchLabel.TextXAlignment = Enum.TextXAlignment.Left
swatchLabel.TextColor3 = Color3.fromRGB(220,220,220)
swatchLabel.Size = UDim2.new(1, -40, 1, 0)
swatchLabel.Parent = swatchRow

local swatch = Instance.new("Frame")
swatch.Size = UDim2.fromOffset(28, 28)
swatch.AnchorPoint = Vector2.new(1, 0.5)
swatch.Position = UDim2.new(1, 0, 0.5, 0)
swatch.BackgroundColor3 = Color3.fromHSV(h, s, v)
swatch.BorderSizePixel = 0
swatch.Parent = swatchRow
do
	local c = Instance.new("UICorner"); c.CornerRadius = UDim.new(0, 6); c.Parent = swatch
end

-- Content area
local content = Instance.new("Frame")
content.BackgroundTransparency = 1
content.Position = UDim2.new(0, 0, 0, 64)
content.Size = UDim2.new(1, 0, 1, -64)
content.Parent = panel

-- SV square
local sv = Instance.new("Frame")
sv.Name = "SV"
sv.Size = UDim2.fromOffset(260, 160)
sv.Position = UDim2.new(0, 0, 0, 0)
sv.BackgroundColor3 = Color3.fromHSV(h, 1, 1)
sv.BorderSizePixel = 0
sv.Parent = content
do
	local c = Instance.new("UICorner"); c.CornerRadius = UDim.new(0, 8); c.Parent = sv
end

-- White overlay (S)
local whiteOverlay = Instance.new("Frame")
whiteOverlay.ZIndex = 2
whiteOverlay.BackgroundColor3 = Color3.new(1,1,1)
whiteOverlay.BorderSizePixel = 0
whiteOverlay.Size = UDim2.fromScale(1,1)
whiteOverlay.Parent = sv
do
	local g = Instance.new("UIGradient")
	g.Rotation = 0
	g.Transparency = NumberSequence.new{
		NumberSequenceKeypoint.new(0, 0),  -- left: opaque white
		NumberSequenceKeypoint.new(1, 1),  -- right: transparent
	}
	g.Color = ColorSequence.new(Color3.new(1,1,1), Color3.new(1,1,1))
	g.Parent = whiteOverlay
end

-- Black overlay (V)
local blackOverlay = Instance.new("Frame")
blackOverlay.ZIndex = 3
blackOverlay.BackgroundColor3 = Color3.new(0,0,0)
blackOverlay.BorderSizePixel = 0
blackOverlay.Size = UDim2.fromScale(1,1)
blackOverlay.Parent = sv
do
	local g = Instance.new("UIGradient")
	g.Rotation = 90
	g.Transparency = NumberSequence.new{
		NumberSequenceKeypoint.new(0, 1),  -- top: transparent
		NumberSequenceKeypoint.new(1, 0),  -- bottom: opaque black
	}
	g.Color = ColorSequence.new(Color3.new(0,0,0), Color3.new(0,0,0))
	g.Parent = blackOverlay
end

-- SV cursor
local svCursor = Instance.new("Frame")
svCursor.ZIndex = 4
svCursor.Size = UDim2.fromOffset(12, 12)
svCursor.AnchorPoint = Vector2.new(0.5, 0.5)
svCursor.BackgroundColor3 = Color3.fromRGB(255,255,255)
svCursor.BorderSizePixel = 0
svCursor.Parent = sv
do
	local c = Instance.new("UICorner"); c.CornerRadius = UDim.new(1, 0); c.Parent = svCursor
	local stroke = Instance.new("UIStroke"); stroke.Color = Color3.fromRGB(0,0,0); stroke.Thickness = 1.5; stroke.Parent = svCursor
end

-- Hue bar
local hueBar = Instance.new("Frame")
hueBar.Name = "Hue"
hueBar.Size = UDim2.fromOffset(24, sv.AbsoluteSize.Y)
hueBar.Position = UDim2.new(0, sv.Size.X.Offset + 12, 0, 0)
hueBar.BackgroundColor3 = Color3.new(1,1,1)
hueBar.BorderSizePixel = 0
hueBar.Parent = content
do
	local c = Instance.new("UICorner"); c.CornerRadius = UDim.new(0, 8); c.Parent = hueBar
	local g = Instance.new("UIGradient"); g.Rotation = 90
	g.Color = ColorSequence.new{
		ColorSequenceKeypoint.new(0.00, Color3.fromHSV(0/6,1,1)),
		ColorSequenceKeypoint.new(0.17, Color3.fromHSV(1/6,1,1)),
		ColorSequenceKeypoint.new(0.33, Color3.fromHSV(2/6,1,1)),
		ColorSequenceKeypoint.new(0.50, Color3.fromHSV(3/6,1,1)),
		ColorSequenceKeypoint.new(0.67, Color3.fromHSV(4/6,1,1)),
		ColorSequenceKeypoint.new(0.83, Color3.fromHSV(5/6,1,1)),
		ColorSequenceKeypoint.new(1.00, Color3.fromHSV(1,1,1)),
	}
	g.Parent = hueBar
end

-- Hue cursor
local hueCursor = Instance.new("Frame")
hueCursor.ZIndex = 2
hueCursor.Size = UDim2.fromOffset(hueBar.Size.X.Offset + 6, 4)
hueCursor.AnchorPoint = Vector2.new(0.5, 0.5)
hueCursor.BackgroundColor3 = Color3.fromRGB(255,255,255)
hueCursor.BorderSizePixel = 0
hueCursor.Parent = content
do
	local c = Instance.new("UICorner"); c.CornerRadius = UDim.new(1, 0); c.Parent = hueCursor
	local stroke = Instance.new("UIStroke"); stroke.Color = Color3.fromRGB(0,0,0); stroke.Thickness = 1; stroke.Parent = hueCursor
end

task.defer(function()
	hueBar.Size = UDim2.fromOffset(24, sv.AbsoluteSize.Y)
	hueBar.Position = UDim2.new(0, sv.Size.X.Offset + 12, 0, 0)
	hueCursor.Position = UDim2.new(0, sv.Size.X.Offset + 12 + hueBar.Size.X.Offset/2, 0, 0)
end)

-- === Helpers ===
local function clamp01(x) return math.clamp(x, 0, 1) end
local function colorNow() return Color3.fromHSV(h, s, v) end

local function applyUIFromHSV()
	swatch.BackgroundColor3 = colorNow()
	sv.BackgroundColor3 = Color3.fromHSV(h, 1, 1)
	local px = s * sv.AbsoluteSize.X
	local py = (1 - v) * sv.AbsoluteSize.Y
	svCursor.Position = UDim2.fromOffset(px, py)
	local hy = h * hueBar.AbsoluteSize.Y
	hueCursor.Position = UDim2.new(0, sv.Size.X.Offset + 12 + hueBar.Size.X.Offset/2, 0, hy)
end

local function pickSVFromPoint(x, y)
	local rel = sv.AbsolutePosition
	local w, hgt = sv.AbsoluteSize.X, sv.AbsoluteSize.Y
	s = clamp01((x - rel.X) / w)
	v = 1 - clamp01((y - rel.Y) / hgt)
	applyUIFromHSV()
end

local function pickHueFromPoint(y)
	local relY = hueBar.AbsolutePosition.Y
	local hgt = hueBar.AbsoluteSize.Y
	h = clamp01((y - relY) / hgt)
	applyUIFromHSV()
end

-- Throttle network sends
local lastSend = 0
local function maybeSendColor()
	local t = tick()
	if t - lastSend >= 0.08 then
		lastSend = t
		ColorChoice:FireServer(colorNow())
	end
end

-- === Auto-hide controls ===
local function showPicker()
	panel.Visible = true
	pickerVisible = true
end

local function hidePicker()
	panel.Visible = false
	pickerVisible = false
end

-- Reopen button toggles the panel
reopenBtn.MouseButton1Click:Connect(function()
	if pickerVisible then
		hidePicker()
	else
		showPicker()
	end
end)

-- === Input wiring ===
sv.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		isDraggingSV = true
		local pos = UserInputService:GetMouseLocation()
		pickSVFromPoint(pos.X, pos.Y)
		maybeSendColor()
	end
end)

hueBar.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		isDraggingH = true
		local pos = UserInputService:GetMouseLocation()
		pickHueFromPoint(pos.Y)
		maybeSendColor()
	end
end)

UserInputService.InputChanged:Connect(function(input)
	if input.UserInputType ~= Enum.UserInputType.MouseMovement and input.UserInputType ~= Enum.UserInputType.Touch then
		return
	end
	if isDraggingSV or isDraggingH then
		local pos = UserInputService:GetMouseLocation()
		if isDraggingSV then
			pickSVFromPoint(pos.X, pos.Y)
		else
			pickHueFromPoint(pos.Y)
		end
		maybeSendColor()
	end
end)

UserInputService.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		if isDraggingSV or isDraggingH then
			isDraggingSV = false
			isDraggingH = false
			-- final send and auto-hide the panel
			ColorChoice:FireServer(colorNow())
			hidePicker()
		end
	end
end)

-- Initialize from server-assigned color (if any)
local existing = player:GetAttribute("ChosenColor")
if typeof(existing) == "Color3" then
	local hh, ss, vv = existing:ToHSV()
	h, s, v = hh, ss, vv
end

-- Update selected swatch if server echoes a color
ColorChoice.OnClientEvent:Connect(function(confirmed)
	if typeof(confirmed) == "Color3" then
		local hh, ss, vv = confirmed:ToHSV()
		h, s, v = hh, ss, vv
		applyUIFromHSV()
	end
end)

applyUIFromHSV()
